// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, content)
VALUES (?, ?)
RETURNING id, title, content
`

type CreatePostParams struct {
	Title   string
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Content)
	var i Post
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, title, content FROM posts
WHERE title = ?
`

func (q *Queries) GetPost(ctx context.Context, title string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, title)
	var i Post
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, content FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(&i.ID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
